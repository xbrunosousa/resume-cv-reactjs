{"version":3,"sources":["services/api.js","components/loading/index.jsx","components/Education.jsx","components/WorkExperience.jsx","components/Skills.jsx","registerServiceWorker.jsx","index.js","views/index.jsx"],"names":["api","axios","create","baseURL","Loading","className","name","date","description","key","value","Progress","color","replace","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","useState","cv","setCvData","isLoading","setIsLoading","useEffect","get","res","data","finally","ReactGA","initialize","pageview","pathname","search","Container","Math","random","Row","Col","md","offset","size","src","profile","image","alt","profession","contact","tel","cel","address","website","mail","skills","map","skill","Skills","experience","WorkExperience","education","Education","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"2QAQeA,E,OAJHC,EAAMC,OAAO,CACvBC,QAHc,6BCSDC,MARf,WACE,OACE,yBAAKC,UAAU,oBACb,yBAAKA,UAAU,oBCJN,kBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAMC,EAAf,EAAeA,YAAf,OACb,yBAAKC,IAAKH,GACR,uBAAGD,UAAU,YAAYC,GACzB,uBAAGD,UAAU,WAAWE,GACxB,uBAAGF,UAAU,eAAeG,KCJjB,kBAAGF,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAMC,EAAf,EAAeA,YAAf,OACb,6BACE,uBAAGH,UAAU,YAAYC,GACzB,uBAAGD,UAAU,WAAWE,GACxB,uBAAGF,UAAU,eAAeG,K,QCHjB,kBAAGF,EAAH,EAAGA,KAAMI,EAAT,EAASA,MAAT,OACb,6BACE,uBAAGL,UAAU,cAAcC,GAC3B,kBAACK,EAAA,EAAD,CACEC,MAAM,QACNP,UAAU,cACVK,MAAOA,EAAMG,QAAQ,IAAK,Q,OCC1BC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MChEjEC,IAASC,OAAO,mBCID,WAAO,IAAD,EACKC,mBAAS,IADd,mBACZC,EADY,KACRC,EADQ,OAEeF,oBAAS,GAFxB,mBAEZG,EAFY,KAEDC,EAFC,KAqBnB,OAJAC,qBAAU,WAZRD,GAAa,GACb3C,EACG6C,IAAI,6BACJpB,MAAK,SAAAqB,GACJb,QAAQC,IAAIY,EAAIC,MAChBN,EAAUK,EAAIC,SAEfC,SAAQ,kBAAML,GAAa,MAC9BM,IAAQC,WAAW,kBACnBD,IAAQE,SAASnC,OAAOC,SAASmC,SAAWpC,OAAOC,SAASoC,UAK3D,IAGD,6BACGX,EACC,kBAAC,EAAD,MAEA,kBAACY,EAAA,EAAD,CAAW7C,IAAK8C,KAAKC,UACnB,kBAACC,EAAA,EAAD,KAEE,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,OAAQ,EAAGC,KAAM,GAAKxD,UAAU,cACzC,yBAAKA,UAAU,UACb,yBACEA,UAAU,YACVyD,IAAKtB,EAAGuB,QAAQC,MAAQ,YACxBC,IAAI,WACH,KAGL,uBAAG5D,UAAU,QAAQmC,EAAGuB,QAAQzD,MAChC,uBAAGD,UAAU,cAAcmC,EAAGuB,QAAQG,YACtC,yBAAK7D,UAAU,aACf,uBAAGA,UAAU,WAAb,WACA,wBAAIA,UAAU,WACd,uBAAGA,UAAU,YAAYmC,EAAGuB,QAAQvD,YAAc,KAElD,uBAAGH,UAAU,WAAb,WACA,wBAAIA,UAAU,WACd,uBAAGA,UAAU,OAAOmC,EAAGuB,QAAQI,QAAQC,KACvC,uBAAG/D,UAAU,OAAOmC,EAAGuB,QAAQI,QAAQE,KACvC,uBAAGhE,UAAU,WAAWmC,EAAGuB,QAAQI,QAAQG,SAC3C,uBAAGjE,UAAU,WAAWmC,EAAGuB,QAAQI,QAAQI,SAC3C,uBAAGlE,UAAU,QAAQmC,EAAGuB,QAAQI,QAAQK,MACxC,uBAAGnE,UAAU,UAAb,UACA,wBAAIA,UAAU,WACbmC,EAAGuB,QAAQU,OAAOC,KAAI,SAACC,EAAOlE,GAAR,OACrB,kBAACmE,EAAD,CAAQnE,IAAKA,EAAKH,KAAMqE,EAAMrE,KAAMI,MAAOiE,EAAMjE,YAMrD,kBAACgD,EAAA,EAAD,CAAKC,GAAG,IAAItD,UAAU,eACpB,uBAAGA,UAAU,kBAAb,mBACA,wBAAIA,UAAU,YAEbmC,EAAGuB,QAAQc,WAAWH,KAAI,SAACG,EAAYpE,GAAb,OACzB,kBAACqE,EAAD,CACErE,IAAKA,EACLH,KAAMuE,EAAWvE,KACjBC,KAAMsE,EAAWtE,KACjBC,YAAaqE,EAAWrE,iBAI5B,uBAAGH,UAAU,aAAb,aACA,wBAAIA,UAAU,YAEbmC,EAAGuB,QAAQgB,UAAUL,KAAI,SAACK,EAAWtE,GAAZ,OACxB,kBAACuE,EAAD,CACEvE,IAAKA,EACLH,KAAMyE,EAAUzE,KAChBC,KAAMwE,EAAUxE,KAChBC,YAAauE,EAAUvE,uBDtFzB,MAASyE,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmB5D,UAAW,CAGzE,GADkB,IAAI6D,IAAIC,qBAAwBpE,OAAOC,UAC3CoE,SAAWrE,OAAOC,SAASoE,OAIvC,OAGFrE,OAAOsE,iBAAiB,QAAQ,WAC9B,IAAMjE,EAAK,UAAM+D,qBAAN,sBAENtE,EAwCX,SAAiCO,GAE/BkE,MAAMlE,GACHI,MAAK,SAAA+D,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQ7C,IAAI,gBAAgB8C,QAAQ,cAG7CrE,UAAUC,cAAcqE,MAAMnE,MAAK,SAAAC,GACjCA,EAAamE,aAAapE,MAAK,WAC7BT,OAAOC,SAAS6E,eAKpB1E,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEAzDA6D,CAAwB1E,GAHxBD,EAAgBC,OC7BxB2E,K","file":"static/js/main.045ab6c6.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseURL = 'https://www.mocky.io/v2/';\n\nconst api = axios.create({\n  baseURL\n});\n\nexport default api;\n","import React from 'react';\n// Display gif loading in load api data\n\nfunction Loading() {\n  return (\n    <div className=\"divLoadingScreen\">\n      <div className=\"loadingScreen\" />\n    </div>\n  );\n}\n\nexport default Loading;\n","import React from 'react';\n\nexport default ({ name, date, description }) => (\n  <div key={name}>\n    <p className='eduTitle'>{name}</p>\n    <p className='eduDate'>{date}</p>\n    <p className='eduDescript'>{description}</p>\n  </div>\n);\n","import React from 'react';\n\nexport default ({ name, date, description }) => (\n  <div>\n    <p className='jobTitle'>{name}</p>\n    <p className='jobDate'>{date}</p>\n    <p className='jobDescript'>{description}</p>\n  </div>\n);\n","import React from 'react';\nimport { Progress } from 'reactstrap';\n\nexport default ({ name, value }) => (\n  <div>\n    <p className='titleSkill'>{name}</p>\n    <Progress\n      color='white'\n      className='progressBar'\n      value={value.replace(/%/, '')}\n    />\n  </div>\n);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'assets/scss/app.scss';\nimport App from 'views';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","import React, { useEffect, useState } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport 'assets/scss/app.scss';\nimport api from 'services/api';\nimport Loading from 'components/loading';\nimport Education from 'components/Education';\nimport WorkExperience from 'components/WorkExperience';\nimport Skills from 'components/Skills';\nimport ReactGA from 'react-ga';\n\nexport default () => {\n  const [cv, setCvData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const getData = () => {\n    setIsLoading(true);\n    api\n      .get('/5a5e38f3330000b0261923a5')\n      .then(res => {\n        console.log(res.data);\n        setCvData(res.data);\n      })\n      .finally(() => setIsLoading(false));\n    ReactGA.initialize('UA-121994767-1'); // Google Analytics\n    ReactGA.pageview(window.location.pathname + window.location.search); // Google Analytics\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  return (\n    <div>\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <Container key={Math.random()}>\n          <Row>\n            {/* Left Column */}\n            <Col md={{ offset: 1, size: 4 }} className='leftColumn'>\n              <div className='avatar'>\n                <img\n                  className='avatarImg'\n                  src={cv.profile.image + '?raw=true'}\n                  alt='Avatar'\n                />{' '}\n                {/* Add 'raw' parameter to github url */}\n              </div>\n              <p className='name'>{cv.profile.name}</p>\n              <p className='profession'>{cv.profile.profession}</p>\n              <div className='lineLeft' />\n              <p className='profile'>Profile</p>\n              <hr className='hrLeft' />\n              <p className='descript'>{cv.profile.description + '.'}</p>\n\n              <p className='contact'>Contact</p>\n              <hr className='hrLeft' />\n              <p className='tel'>{cv.profile.contact.tel}</p>\n              <p className='cel'>{cv.profile.contact.cel}</p>\n              <p className='address'>{cv.profile.contact.address}</p>\n              <p className='website'>{cv.profile.contact.website}</p>\n              <p className='mail'>{cv.profile.contact.mail}</p>\n              <p className='skills'>Skills</p>\n              <hr className='hrLeft' />\n              {cv.profile.skills.map((skill, key) => (\n                <Skills key={key} name={skill.name} value={skill.value} />\n              ))}\n            </Col>\n            {/* /Left Column */}\n\n            {/* Right Column */}\n            <Col md='6' className='rightColumn'>\n              <p className='workExperience'>Work Experience</p>\n              <hr className='hrRight' />\n\n              {cv.profile.experience.map((experience, key) => (\n                <WorkExperience\n                  key={key}\n                  name={experience.name}\n                  date={experience.date}\n                  description={experience.description}\n                />\n              ))}\n\n              <p className='education'>EDUCATION</p>\n              <hr className='hrRight' />\n\n              {cv.profile.education.map((education, key) => (\n                <Education\n                  key={key}\n                  name={education.name}\n                  date={education.date}\n                  description={education.description}\n                />\n              ))}\n            </Col>\n            {/* /Right Column */}\n          </Row>\n        </Container>\n      )}\n    </div>\n  );\n};\n"],"sourceRoot":""}